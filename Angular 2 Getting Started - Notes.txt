
In the root folder of the project (where the project.json file is), 
 + Run "npm install" in to install all the dependencies.
 + Run "npm start" to fun the start script which start the server and add watch mode for code changes to see the changes immediately 

By convention the root component of an application is named AppComponent

Modules (export, import)will be automatically added to the index.html file with SystemJS

+++ To create an Angular2 component +++
import { Component } from 'angular2/core'; 	// load Component function from angular core module
@Component({
	selector: 'pm-app', 	// defines a component's directive name, which can be used like a tag in the html (ex: "<body><pm-app></pm-app></body>")
	template: '<h1>Hello {{name}}</h1>' 	// a component must have a template which displays html on the page
})
export class AppComponent{
	name: string = "Tai Le"
}


+++ To use url for the template +++
@Component({
    selector : 'pm-products',
    templateUrl : 'app/products/product-list.component.html' 		// Use templateUrl instead of template
})


+++ To use a component as a directive inside another component
1) Add the directive of the component we want to use inside of outter component's template
2) Add the component name to the the 'directives' array of @Component 
3) Import the component
Ex:
import { ProductListComponent} from './products/product-list.component' 	// (1)
@Component({	
	selector : 'pm-app',
	template: '<div><pm-products></pm-products</div>' 						// (2)
	directives: [ProductListComponent]										// (3)
})

+ Property binding - one way binding, from the component class's property to the target element's property
Ex: <img [src]='product.imageUrl'> 		// property binding
	<img src={{product.imageUrl}}> 		// interpolation
	
	
+ Event binding - binds a event to an expression, often the component's method
Ex: <button (click)='toggleImage()'>  	// notice events use (), whereas properties use []	

+ Two-way binding 
Ex: <input [(ngModel)]='listFliter'>

+ Pipes tranform bound properties before they're displayed

+ Define an interface to specify custom types. Import the interface to use it
Ex: 
export interface IProduct{
	productId: number;
	productName: string;
	calculateDiscount(percent: number): number;
}
	
+ To encapsulate component styles (this will apply to the component's template and won't leak out to other parts of the application)
@Component({
	selector: 'pm-product',
	templateUrl: 'app/products/product-list.component.html',
	styles: ['thead {color: #337AB7;}'] 					// styles
})	

@Component({
	selector: 'pm-product',
	templateUrl: 'app/products/product-list.component.html',
	styleUrls: ['app/products/product-list.component.css']  // using style sheets
})

+ To use Angular's lifecycle hooks, implement the component with Angular's lifecycle interfaces: OnInit, OnChanges, and OnDestroy
Ex:
import { Component, OnInit } from 'angular2/core';
@Component({
	...
})
export class ProductListComponent implements OnInit{
	pageTitle: string = 'Product List';
	ngOnInit(): void{
		console.log('In OnInit');
	}
}


+ To build custom pipe 
import { Pipe, PipeTransform } from 'angular2/core' 	
@Pipe({	
	name: 'productFilter'	// name of the pipe used in the template					
})
export class ProductFilterPipe implements PipeTransform{
	transform(value: IProduct[], args: string[]) : IProduct(){  
	
	}
	
} // 'value' is the array the gets passed in, 'args' is the arguments we use to perform the tranformation

+ To use the custom pipe
import { ProductFilterPipe } from './product-filter.pipe'; 
@Component({
	selector: 'pm-product',
	templateUrl: 'app/products/product-list.component.html',
	pipes: [ProductFilterPipe]
})
export class ProductListComponent{}

+ For nested component
 - Use Input decorator on the property in the nested component class that wants the value passed from parent component
 export class StarComponent{
	@Input() rating: number;
	starWidth: number;
 }
 - To pass the value to nested component, use property binding
 <ai-star [rating]='product.starRating'></ai-star>
 
 - To pass data from nested component to parent component, use the decorator Output on an event property
 Inside the nested component:
 export class StarComponent{
	@Input() rating: number;
	@Output() notify: EventEmitter<string> = new EventEmitter<string>();
	
	onClick(){
		this.notify.emit("clicked!");		// when user click the stars, emit the event to parent component
	}
 }
 Inside the parent component's html
  <ai-star [rating]='product.starRating'	// this is from parent to nested
	(notify)='onNotify($event)'				// this is from nested to parent
  ></ai-star>
 Inside the parent component:
 export class ProductListComponent{
	onNotify(message: string): void{} 		// handle the event
 }
 

+ To create Services and use Dependency Injection
1) Create the service
import { Injectable } from 'angular2/core';
@Injectable()
export class ProductService{
	getProducts(): any[]{
		...
	}
}

2) Register the service
import { ProductService } from './products/product.service'; 
@Component({
    providers: [ProductService]			// register service here 
})
export class AppComponent{
    pageTitle : string = "Acme Product Management";
}

3) Use Dependency Injection to use the service
import { ProductService } from "./product.service"			// import service
@Component({
	...
})
export class ProductListComponent implements OnInit{
    constructor (private _productService: ProductService){	// use Dependency Injection
    }

    ngOnInit(): void {
        this.products = this._productService.getProducts();	// use a method from the service
    }
}

Notes: 
 + Register the service at the root component if the service is used throughout the application. 
 + Specific component if only that component uses the service
 

+ To retrieve data using http
1) Include angular 2 http script in (root) html
2) Register the HTTP_PROVIDERS in (root) component
3) Import RxJS to use the Reactive extesions such as "map" operator
4) Build a service that uses the http requests
5) Inject http using constructor
6) Create a method for each http request
	- Use map operator to tranform to a JSON object 
7) In the class the needs data from data service, call the subscribe method to subscribe to the Observable and provide a function to execute when the Observale emit an item


+ To use angular routing
1) Include the Angular 2 router script
2) Define the base element
3) Register ROUTER_PROVIDERS
4) Configure the routes in root component
5) Tie routes to actions
6) Place the View
7) Pass parameters if needed

+ To configure Routes - decorate the component class with RouteConfig to configure the routings (4)
In app.component.ts
import { RouteConfig } from 'angular2/router';
import { WelcomeComponent } from 'welcome.component';
import { ProductListComponent } from 'product-list.component';
@RouteConfig([
	{ path: '/welcome', name: 'Welcome', component: WelcomeComponent, useAsDefault: true},
	{ path: '/products', name: 'Products', component: ProductListComponent}
])

+ To tie the route to an action, use routerLink directive, which ROUTER_DIRECTIVES needs to be imported (5)
In app.component.ts
import { ROUTER_PROVIDERS, ROUTER_DIRECTIVES } from 'angular2/router'; 
@Component({
	selector: 'pm-app',
	template: `<li><a [routerLink]="['Welcome']">Home</a></li>`,
	directives: [ROUTER_DIRECTIVES],
	providers: [ROUTER_PROVIDERS]
})

+ To display the view of the routed component, use (6)
<router-outlet></router-outlet>

+ To pass parameters from url (7)
In app.component.ts - where we specify the routes
{ path: '/products/:id', name: 'ProductDetail', component: ProductDetailComponent}

In product-list.component.html - where we use the routerLink directive to generate the href for this component
<a [routerLink]="['ProductDetail', {id: product.productId}]">
	{{product.productName}}
</a>

In product-detail.component.ts - where we get the parameter value from the url
import { RouteParams } from "angular2/router";
constructor(private _routeParams: RouteParams){
	console.log(this._routeParams.get("id"));
}
