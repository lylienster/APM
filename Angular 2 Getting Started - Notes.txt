
In the root folder of the project (where the project.json file is), 
 + Run "npm install" in to install all the dependencies.
 + Run "npm start" to fun the start script which start the server and add watch mode for code changes to see the changes immediately 

By convention the root component of an application is named AppComponent

Modules (export, import)will be automatically added to the index.html file with SystemJS

+++ To create an Angular2 component +++
import { Component } from 'angular2/core'; 	// load Component function from angular core module
@Component({
	selector: 'pm-app', 	// defines a component's directive name, which can be used like a tag in the html (ex: "<body><pm-app></pm-app></body>")
	template: '<h1>Hello {{name}}</h1>' 	// a component must have a template which displays html on the page
})
export class AppComponent{
	name: string = "Tai Le"
}


+++ To use url for the template +++
@Component({
    selector : 'pm-products',
    templateUrl : 'app/products/product-list.component.html' 		// Use templateUrl instead of template
})


+++ To use a component as a directive inside another component
1) Add the directive of the component we want to use inside of outter component's template
2) Add the component name to the the 'directives' array of @Component 
3) Import the component
Ex:
import { ProductListComponent} from './products/product-list.component' 	// (1)
@Component({	
	selector : 'pm-app',
	template: '<div><pm-products></pm-products</div>' 						// (2)
	directives: [ProductListComponent]										// (3)
})

+ Property binding - one way binding, from the component class's property to the target element's property
Ex: <img [src]='product.imageUrl'> 		// property binding
	<img src={{product.imageUrl}}> 		// interpolation
	
	
+ Event binding - binds a event to an expression, often the component's method
Ex: <button (click)='toggleImage()'>  	// notice events use (), whereas properties use []	

+ Two-way binding 
Ex: <input [(ngModel)]='listFliter'>

+ Pipes tranform bound properties before they're displayed
	
	